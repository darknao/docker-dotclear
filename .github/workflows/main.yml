name: CI
on:
  push:
  schedule:
  - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  detect_release:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    name: detect new release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3
      uses: actions/setup-python@v1
      with:
        python-version: "3.x"
    - name: pip install
      run: pip install ansible lxml
    - name: run playbook
      id: playbook
      run: ansible-playbook .github/scripts/check.yml
    - name: Create Pull Request
      id: cpr
      uses: peter-evans/create-pull-request@v3
      with:
        commit-message: Dotclear ${{ env.release_version }}
        committer: GitHub <noreply@github.com>
        author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        signoff: false
        branch: v${{ env.release_version }}
        delete-branch: true
        title: 'Dotclear version v${{ env.release_version }}'
        body: |
          New version available!
          Release info: ${{ env.release_info }}
        labels: |
          automated pr
        assignees: darknao
        reviewers: darknao

    - name: Check outputs
      run: |
        echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

  gen:
    name: Generate build jobs
    runs-on: ubuntu-latest
    outputs:
      strategy_cache: ${{ steps.gencache.outputs.strategy }}
      strategy_all: ${{ steps.genall.outputs.strategy }}
    steps:
    - uses: actions/checkout@v2
    - id: gencache
      name: Get images list
      run: python .github/scripts/gen.py --set-output --prime
    - id: genall
      name: Get images list
      run: python .github/scripts/gen.py --set-output --no-prime

  build_cache:
    needs: gen
    strategy: ${{ fromJson(needs.gen.outputs.strategy_cache) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm/v7
        push: true
        tags: ${{ matrix.tags }}
        cache-to: type=registry,ref=darknao/dotclear:${{ matrix.cache }},mode=max
        cache-from: type=registry,ref=darknao/dotclear:${{ matrix.cache }}

  build:
    needs: gen
    strategy: ${{ fromJson(needs.gen.outputs.strategy_all) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm/v7
        push: true
        tags: ${{ matrix.tags }}
        cache-from: type=registry,ref=darknao/dotclear:${{ matrix.cache }}
